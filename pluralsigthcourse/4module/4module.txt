const Stars = (props) => 
{
 //  const numberOfStars =1 + Math.floor(Math.random()*9);
   let stars =[];
   //for (let i=0;i<numberOfStars;i++)
   //{
    // stars.push(<i key={i} className="fa fa-star"></i>);
   //}
   return (
      <div className="col-5">
      {_.range(props.numberOfStars).map(i =>
      <i key={i} className="fa fa-star"></i>
      )}
      </div>
   );
}
const Answer = (props) => 
{
  
   return (
      <div className="col-5">
       {props.selected.map(
        (number,i) =>
        <span key={i} onClick={() => props.unselectNumber(number)} >{number}</span>
       )}
      </div>
   );
}
const DoneFrame = (props) => 
{
  return (
      <div className="text-center">
        <h2>{props.doneStatus}</h2>
      </div>
    );
}
const Button = (props) => 
{
  let button;
  switch(props.answerIsCorrect)
  {
      case true:
        button = 
         <button className="btn btn-success" onClick={props.acceptAnswer} >
           <i className="fa fa-check"></i>
         </button>;
      break;
      case false:
           button = 
         <button className="btn btn-danger" >
           <i className="fa fa-times"></i>
         </button>;
      break;
      default:
       button =
         <div className="col-2">
       <button className="btn" 
               onClick={props.checkAnswer}
             disabled={props.selected.length ===0} >=</button>
      </div>;
      break;
  }
  
   return (
      <div className="col-2 text-center">
       {button}
       <br/>
       <button className="btn btn-warning btn-sm" onClick={props.redraw}
               disabled={props.redraws === 0}>
         <i className="fa fa-refresh">{props.redraws}</i>
       </button>
      </div>
   );
}

class Game extends React.Component
{
   static randomNumber = () => 1 + Math.floor(Math.random()*9);
   constructor(props)
   {
      super(props);
      this.state = 
      {
      selectedNumbers : [],
      numberOfStars :Game.randomNumber(),
      answerIsCorrect: null,
      usedNumbers : [],
      redraws:125,
      doneStatus: null,
      };
   }
   
   selectNumber = (clickedNumber) =>
   {
   console.log('adfa');
   //console.log(this.state.selectedNumbers.indexOf(clickedNumber));
    if(this.state.selectedNumbers.indexOf(clickedNumber)>=0)
    {
    
    }else
      {
      this.setState(
      prevState => (
        {
       selectedNumbers: prevState.selectedNumbers.concat(clickedNumber),
       answerIsCorrect:null
        }
      )
     
      );
      }
   }
   
   unselectNumber = (clickedNumber) => {
   
     this.setState(
      prevState => (
        {
       selectedNumbers: prevState.selectedNumbers.filter(number=>clickedNumber!==number),
       answerIsCorrect:null
        }
      )
     
      );
   }
   checkAnswer = () => 
   {
      console.log('check');
       this.setState(
           prevState => ({
            answerIsCorrect: prevState.numberOfStars === 
                              prevState.selectedNumbers.reduce((total,n) => total +n,0)
           
           }
       
       ));
   };
   acceptAnswer = () =>
   {
       this.setState(
           prevState => (
           {
               selectedNumbers : [],
      numberOfStars :Game.randomNumber(),
      answerIsCorrect: null,
      usedNumbers : prevState.usedNumbers.concat(prevState.selectedNumbers)
             
           }
           ),this.updateDoneStatus
       ); 
   };
      redraw = () =>
   {
    if(this.state.redraws ===0){return ;}
       this.setState(
           prevState => (
           {
               selectedNumbers : [],
      numberOfStars :Game.randomNumber(),
      answerIsCorrect: null,
      redraws: prevState.redraws-1
             
           }
           )
       ); 
   };
   
   updateDoneStatus =() => {
        
            this.setState(
           prevState => {
           {
              if(prevState.usedNumbers.length === 9)
                 {
                   return { doneStatus: "Done. Nice!" };
                 }
                
             
           }
           }
       ); 
   }
   
   render()
   {
    return (
      <div className="container">
      <h3> play nine </h3>
      <hr/>
       <div className="row" >
           <Stars numberOfStars={this.state.numberOfStars} />
               <Button
                     redraws ={this.state.redraws}
                    selected={this.state.selectedNumbers} 
                             checkAnswer={this.checkAnswer}
                    answerIsCorrect={this.state.answerIsCorrect}   
                    acceptAnswer={this.acceptAnswer}
                    redraw={this.redraw}
               />
             <Answer unselectNumber={this.unselectNumber}  selected={this.state.selectedNumbers} />
           </div>
           <br />
           {
            this.state.doneStatus ? 
                <DoneFrame doneStatus={this.state.doneStatus} /> :
                           <Numbers selected={this.state.selectedNumbers} 
                    selectNumber={this.selectNumber}
                   usedNumbers={this.state.usedNumbers}
                  
            />
             
           }

            <br/>
           
      </div>
    );
   }
}

const Numbers = (props) =>
{
//this way , arrayofnumber is created each time a number is created
//const arrayOfNumbers = _.range(1,10);
const numberClassName = (number) =>
 {
  if(props.usedNumbers.indexOf(number)>=0)
      {
       return 'used';
      }
      if(props.selected.indexOf(number)>=0)
      {
       return 'selected';
      }
 }
return (
   <div className="card text-center">
   <div>
    {Numbers.list.map((number,i) =>  <span key={i} className={numberClassName(number)}
                                      onClick={() => props.selectNumber(number)}>{number}</span>)}
   
   </div>
   </div>
 );
}
//this will be a constant.
Numbers.list = _.range(1,10);

class App extends React.Component
{
  render()
   {
     return (
        <div>
           <Game />
          
        </div>
     );
   } 
}

ReactDOM.render(<App />,mountNode);